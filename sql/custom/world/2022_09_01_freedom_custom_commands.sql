-- FREEDOM CUSTOM COMMANDS
REPLACE INTO `command` (name, help) VALUES
('freedom', 'Syntax: .freedom $subcommand\nType .freedom to see the list of possible subcommands.'),
('freedom cast', 'Syntax: .freedom spell/cast $name/$spellId\nCast public spell with name $name or spell id $spellId.'),
('freedom summon', 'Syntax: .freedom summon $playerName\nSend a summon request to $playerName player to teleport him/her to you if the request is accepted.'),
('freedom demorph', 'Syntax: .freedom demorph\nDemorph yourself.'),
('freedom fly', 'Syntax: .freedom fly on/off/$speedValue\nToggle your fly on/off or set your fly speed to $speedValue.'),
('freedom revive', 'Syntax: .freedom revive\nRevive yourself if you are dead.'),
('freedom unaura', 'Syntax: .freedom unaura\nRemove all auras/spell-effects from yourself.'),
('freedom speed', 'Syntax: .freedom speed $speedValue\nSet movement speed value of all movement types to $speedValue.'),
('freedom walk', 'Syntax: .freedom walk $speedValue\nSet movement speed value of walking to $speedValue.'),
('freedom run', 'Syntax: .freedom run $speedValue\nSet movement speed value of running to $speedValue.'),
('freedom swim', 'Syntax: .freedom swim $speedValue\nSet movement speed value of swimming to $speedValue.'),
('freedom scale', 'Syntax: .freedom scale $scaleValue\nSet your character''s size to $scaleValue.'),
('freedom drunk', 'Syntax: .freedom drunk $drunkPercentage\nSet your character''s drunkenness to $drunkPercentage.'),
('freedom waterwalk', 'Syntax: .freedom waterwalk on/off\nToggle your character''s waterwalking on/off.'),
('freedom fix', 'Syntax: .freedom fix\nFix your character''s item durability.'),
('freedom mailbox', 'Syntax: .freedom mailbox\nOpen mailbox UI.'),
('freedom money', 'Syntax: .freedom money\nReset your gold to high amounts.'),
('freedom bank', 'Syntax: .freedom bank\nOpen bank UI.'),
('freedom customize', 'Syntax: .freedom customize\nFlag your character for re-customization.'),
('freedom racechange', 'Syntax: .freedom racechange\nFlag your character for race change.'),
('freedom factionchange', 'Syntax: .freedom factionchange\nFlag your character for faction change.'),
('freedom teleport', 'Syntax: .freedom teleport $namePart\nTeleport to first public teleport starting with $namePart string in its name.'),
('freedom teleport add', 'Syntax: .freedom teleport add $name\nAdd public teleport with name $name right where you are currently standing.'),
('freedom teleport delete', 'Syntax: .freedom teleport delete $name\nDelete public teleport with name $name.'),
('freedom teleport list', 'Syntax: .freedom teleport list $namePart\nList public teleports by searching via their names or parts of their names ($namePart).'),
('freedom pteleport', 'Syntax: .freedom pteleport $namePart\nTeleport to first private teleport starting with $namePart string in its name. Private teleports are unique to each account.'),
('freedom pteleport add', 'Syntax: .freedom pteleport add $name\nAdd private teleport with name $name right where you are currently standing. Private teleports are unique to each account.'),
('freedom pteleport delete', 'Syntax: .freedom pteleport delete $name\nDelete private teleport with name $name. Private teleports are unique to each account.'),
('freedom pteleport list', 'Syntax: .freedom pteleport list $namePart\nList private teleports by searching via their names or parts of their names ($namePart). Private teleports are unique to each account.'),
('freedom spell', 'Syntax: .freedom spell/cast $spellId/$spellLink\nCast public spell of specified entry id (or shift-click on spell link, which is in public spell list).'),
('freedom spell add', 'Syntax: .freedom spell add $spellId/$spellLink [true/false]\nAdd spell to public list by its entry id. Second parameter (true/false, by default: false):\ntrue: allow spell to target others,\nfalse: spell only targets caster'),
('freedom spell delete', 'Syntax: .freedom spell delete $spellId/$spellLink\nDelete public spell by their spell entry id ($spellId/$spellLink).'),
('freedom spell list', 'Syntax: .freedom spell list $namePart\nList public spells by searching via their names or parts of their names ($namePart).'),
('freedom morph', 'Syntax: .freedom morph $name/$displayId\nChange the model display of yourself into one of your available morphs of name $name or display id $displayId.'),
('freedom morph add', 'Syntax: .freedom morph add $name $displayId [$playerName]\nAdd morph with name as $name of display $displayId to player $playerName or selected player if $playerName is not supplied.'),
('freedom morph delete', 'Syntax: .freedom morph delete $name/$displayId [$playerName]\nDelete morph with name/display of $name/$displayId from player $playername or selected player if $playerName is not supplied.'),
('freedom morph list', 'Syntax: .freedom morph list [$namePart]\nList all your morphs, optionally filtering them via their custom names or parts of their custom names ($namePart).'),
('freedom hover', 'Syntax: .freedom hover on/off\nToggle your character''s hover state on/off.'),
('freedom tame', 'Syntax: .freedom tame\nMake a pet out of the targeted creature. Only works on tameable creatures.'),
('freedom panda horde', 'Syntax: .freedom panda horde\nChange your race faction to horde pandaren. Can only be used by neutral pandaren. Must relog after executing the command for full changes to take effect.'),
('freedom panda alliance', 'Syntax: .freedom panda alliance\nChange your race faction to alliance pandaren. Can only be used by neutral pandaren. Must relog after executing the command for full changes to take effect.'),
('freedom title list', 'Syntax: .freedom title list [$titleNamePart]\nList all available titles (or if $titleNamePart is provided, list only those what contain $titleNamePart).'),
('freedom title set', 'Syntax: .freedom title set $titleId\nSet your title via $titleId, including custom titles.'),
('freedom recall', 'Syntax: .recall\nReturn to the location set as your hearthstone.'),
('freedom reload', 'Syntax: .freedom reload $subcommand\nType .freedom reload to see the list of possible subcommands.'),
('freedom reload creature', 'Syntax: .freedom reload creature $subcommand\nType .freedom reload creature to see the list of possible subcommands.'),
('freedom reload creature extra', 'Syntax: .freedom reload creature extra\nRefresh FreedomDatabase creature_template_extra and creature_extra tables'),
('freedom reload creature addon', 'Syntax: .freedom reload creature addon\nRefresh WorldDatabase creature_template_addon and creature_addon tables'),
('freedom reload creature base', 'Syntax: .freedom reload creature base\nRefresh WorldDatabase creature_model_info, creature_template, creature_equip_template and creature tables'),
('freedom reload creature equip', 'Syntax: .freedom reload creature equip\nRefresh WorldDatabase creature_equip_template'),
('freedom reload gameobject', 'Syntax: .freedom reload gameobject $subcommand\nType .freedom reload gameobject to see the list of possible subcommands.'),
('freedom reload gameobject extra', 'Syntax: .freedom reload gameobject extra\nRefresh FreedomDatabase gameobject_template_extra and gameobject_extra tables'),
('freedom reload gameobject base', 'Syntax: .freedom reload gameobject base\nRefresh WorldDatabase gameobject_template and gameobject tables'),
('freedom reload freedomtables', 'Syntax: .freedom reload freedomtables\nRefreshes all values from Freedom DB tables in-game.'),
('freedom reload public_tele', 'Syntax: .freedom reload public_tele\nRefreshes in-game public teleports with values from public_tele table in the DB.'),
('freedom reload private_tele', 'Syntax: .freedom reload private_tele\nRefreshes in-game private teleports with values from private_tele table in the DB.'),
('freedom reload public_spell', 'Syntax: .freedom reload public_spell\nRefreshes in-game public spell list with values from public_spell table in the DB.'),
('freedom reload morphs', 'Syntax: .freedom reload morphs\nRefreshes in-game morph list with values from morphs table in the DB.'),
('freedom reload item', 'Syntax: .freedom reload item\nRefreshes in-game item list with values from item table in the DB.'),
('freedom guild', 'Syntax: .freedom guild $subcommand\nType .guild to see the list of possible subcommands or .help guild $subcommand to see info on subcommands'),
('freedom guild create', 'Syntax: .freedom guild create "$GuildName"\nCreate a guild named $GuildName with the player as leader.  Guild name must in quotes.'),
('freedom petscale', 'Syntax: .freedom petscale $scale|reset\nSet pet''s scale to $scale or resets to default with reset.'),
('freedom gameaccount', 'Syntax: .freedom gameaccount $currentamountofgameaccounts $randompassword\nThis command will create another game account for you to use that will be associated with your main BattleNet account\n$currentamountofgameaccoutns is just for you to acknowledge how many game accounts you have currently (and to also help ensure you do not ''accidentally'' keep creating more game accounts).\n$randompassword i just a random password (not actually used to log in) to generate the account. Must be less than 16 characters.'),
('freedom accountaccess', 'Syntax: .freedom accountaccess 1\nThis command will set your access level to that of your main (first) game account. This is only useful when using this command on an additional game account.'),
('freedom changeaccount', 'Syntax: .freedom changeaccount $character $account\nTransfers named character from one game account to another on your BNet account. When designating target account, use just the number (first account = 1, second = 2 etc.)'),

('go relative', 'Syntax: .go relative $local_x [$local_y [$local_z [$local_deg]]]\nTeleport to coordinates relative of your character.\n$local_x is forward(+)/backward(+)\n$local_y is left(+)/right(-)\n$local_z is up(+)/down(-)\n$local_deg is turn left(+)/turn right(-)'),
('go local', 'Syntax: .go local $local_x [$local_y [$local_z [$local_deg]]]\nTeleport to coordinates relative of your character.\n$local_x is forward(+)/backward(+)\n$local_y is left(+)/right(-)\n$local_z is up(+)/down(-)\n$local_deg is turn left(+)/turn right(-)'),
('go', 'Syntax: .go $local_x [$local_y [$local_z [$local_deg]]]\nTeleport to coordinates relative of your character.\n$local_x is forward(+)/backward(+)\n$local_y is left(+)/right(-)\n$local_z is up(+)/down(-)\n$local_deg is turn left(+)/turn right(-)'),

('blacklist', 'Syntax: .blacklist $subcommand\nType .blacklist to see the list of possible subcommands.'),
('blacklist item', 'Syntax: .blacklist item $itemId/$itemLink [$flag] ($flag = 1 by default)\nAdd($flag = 1)/remove($flag = 0) item with id $itemId to blacklist, disallowing anyone but GMs and higher to add it.'),
('blacklist gobject', 'Syntax: .blacklist gobject $entryId/$gobjectLink [$flag] ($flag = 1 by default)\nDisable($flag = 1)/enable($flag = 0) gameobject with id $entryId from spawning and lookup lists.'),
('blacklist creature', 'Syntax: .blacklist creature $entryId/$gobjectLink [$flag] ($flag = 1 by default)\nDisable($flag = 1)/enable($flag = 0) creature with id $entryId from spawning and lookup lists.'),

('gobject scale', 'Syntax: .gobject scale $scale [$guid]\nSet gameobject scale to $scale.'),
('gobject select', 'Syntax: .gobject select [$entryId]\nAdd nearby game object GUID to your selection. You can further filter nearest-selection process by supplying optional game object $entryId parameter (so the search is restricted to that specific $entryId).'),
('gobject phase', 'Syntax: .gobject phase [modifiers] $phaseList\nChange gameobject phase to phases $phaseList (valid $phaseList phasemask items are: 1 2 4 8 16 32 64 128 256, where 1 is default phase) with related world vision update for players. Phase state is persistant and saved to DB. Invalid $phaseList items are ignored. Modifiers:\n-guid $guid : Target gameobject with $guid instead of selection\n-ids : Treat $phaseList items as Phase IDs instead of phase mask entries'),
('gobject spawn', 'Syntax: .gobject spawn $entryId [$spawntimeSecs]\nAdd a game object from game object templates to the world at your current location using the $entryId.\nspawntimesecs sets the spawntime, it is optional.'),
('gobject spawn temp', 'Syntax: .gobject spawn temp $entryId [$spawntimeSecs]\nAdds a temporary gameobject that is not saved to DB.'),
('gobject turn', 'Syntax: .gobject turn [modifiers]\nSet for selected gameobject orientation same as current character orientation. Modifiers:\n-guid $guid : Target gameobject with $guid instead of selection\n-adeg $deg : Turn gameobject by adding degrees $deg to its current orientation\n-sdeg $deg : Turn gameobject by setting its global orientation in degrees $deg'),
('gobject axial', 'Syntax: .gobject axial [modifiers] $roll $pitch $yaw [$guid]\nSet axial rotation (euler''s angles) for roll (X), pitch (Y) and yaw (Z) axis of the object. Angle parameters are to be specified in degree form. Modifiers:\n-adeg : Instead of setting axis angles to specified degrees, add them to the existing ones.'),
('gobject roll', 'Syntax: .gobject roll [modifiers] $roll [$guid]\nSet axial rotation (euler''s angles) for roll (X) axis of the object, preserving the previous values of the other axis angles. Angle parameters are to be specified in degree form. Modifiers:\n-adeg : Instead of setting axis angle to specified degrees, add it to the existing one.'),
('gobject pitch', 'Syntax: .gobject pitch [modifiers] $pitch [$guid]\nSet axial rotation (euler''s angles) for pitch (Y) axis of the object, preserving the previous values of the other axis angles. Angle parameters are to be specified in degree form. Modifiers:\n-adeg : Instead of setting axis angle to specified degrees, add it to the existing one.'),
('gobject yaw', 'Syntax: .gobject yaw [modifiers] $yaw [$guid]\nSet axial rotation (euler''s angles) for yaw (Z) axis of the object, preserving the previous values of the other axis angles. Angle parameters are to be specified in degree form. Modifiers:\n-adeg : Instead of setting axis angle to specified degrees, add it to the existing one.'),

('npc set emote', 'Syntax: .npc set emote $emoteId [$guid]\nSet database persistent play-emote of $emoteId for the creature.'),
('npc set mount', 'Syntax: .npc set mount $mountId [$guid]\nSet database persistent mount of $mountId for the creature.'),
('npc set aura', 'Syntax: .npc set aura $auraId on/off [$guid]\nToggle database persistent aura of $auraId (can also be a spell id) for the creature.'),
('npc set deathstate', 'Syntax: .npc set deathstate on/off [$guid]\nToggle database persistent death animation for the creature. Cancels other set animation states.'),
('npc set sleepstate', 'Syntax: .npc set sleepstate on/off [$guid]\nToggle database persistent sleep animation for the creature. Cancels other set animation states.'),
('npc set hoverstate', 'Syntax: .npc set hoverstate on/off [$guid]\nToggle database persistent hover animation for the creature. Cancels other set animation states.'),
('npc set scale', 'Syntax: .npc set scale $scale [$guid]\nSet size scaling of selected creature to $scale. Target creature by $guid if it is provided.'),
('npc set bytes1', 'Syntax: .npc set bytes1 $bytes1 [$guid]\nSet value for unit field UNIT_FIELD_BYTES_1. Do not use unless you know what this is.'),
('npc set bytes2', 'Syntax: .npc set bytes2 $bytes2 [$guid]\nSet value for unit field UNIT_FIELD_BYTES_2. Do not use unless you know what this is.'),
('npc set sitgroundstate', 'Syntax: .npc set sitgroundstate on/off [$guid]\nToggle database persistent sit-on-ground (normal sit) animation for the creature. Cancels other set animation states.'),
('npc set sitlowstate', 'Syntax: .npc set sitlowstate on/off [$guid]\nToggle database persistent sit-on-low-height (like sitting on low chair) animation for the creature. Cancels other set animation states.'),
('npc set sitmediumstate', 'Syntax: .npc set sitmediumstate on/off [$guid]\nToggle database persistent sit-on-medium-height (like sitting on medium chair) animation for the creature. Cancels other set animation states.'),
('npc set sithighstate', 'Syntax: .npc set sithighstate on/off [$guid]\nToggle database persistent sit-on-high-height (like sitting on high chair, where legs do not even touch the ground) animation for the creature. Cancels other set animation states.'),
('npc set kneelstate', 'Syntax: .npc set kneelstate on/off [$guid]\nToggle database persistent kneel animation for the creature. Cancels other set animation states.'),
('npc set sheathstate', 'Syntax: .npc set sheathstate 0/1/2 [$guid]\nToggle database persistent sheath state for the creature:\n0 - sheath all weapons,\n1 - prepare melee weapons,\n2 - prepare ranged weapons'),
('npc set flystate', 'Syntax: .npc set flystate on/off [$guid]\nToggle database persistent flying/swimming-in-air animation for the creature. Combine with .npc set gravity on/off to setup flying NPCs.'),
('npc set gravity', 'Syntax: .npc set gravity on/off [$guid]\nToggle database persistent gravity state for the creature. Useful to stop creatures falling through spawned gameobjects if turned off.'),
('npc set swim', 'Syntax: .npc set swim on/off [$guid]\nToggle database persistent swim ability for the creature (mainly sets whether creature will swim on top of water if fallen into it or keep falling to the bottom below water-line).'),

('lookup item', 'Syntax: .lookup item [modifiers] $itemNamePart\nLooks up an item by $itemNamePart, and returns all matches with their Item IDs (does not include unrefined custom items unless \'-c\' modifier is specified). Command has following modifiers:\n-c : Search through unrefined custom items instead of default ones\n-a : Search only armor items (item class == 4)\n-w : Search only weapon items (item class == 2)'),

('cometome', 'Syntax: .cometome [$speed]\nMake selected creature walk/run to your current location (new position not saved to DB, however moving/turning commands will take the new position into account). You can specify optional $speed parameter to set custom movement speed, otherwise creature''s speed is used.'),
('jumptome', 'Syntax: .jumptome [$speedXY [$speedZ]]\nMake selected creature jump to your current location (new position not saved to DB, however moving/turning commands will take the new position into account). You can specify optional $speedXY parameter to set custom jump velocity and an optional $speedZ to set height of the parabolic curve between jump points ($speedZ is 0 by default, which means that the jump will be straight, while greater $speedZ values make higher and higher curve).'),

('playlocal', 'Syntax: .playlocal $soundId\nPlays the sound indicated by $soundId for all players within visiblity range.'),
('additemall', 'Syntax: .additem $itemid/[$itemname]/$shift-click-item-link $itemcount $bonusListIDs\nAdds the specified number of items of id $itemid (or exact (!) name $itemname in brackets, or link created by shift-click at item in inventory or recipe) to all character''s inventory. If $itemcount is omitted, only one item will be added. $bonusListIDs is a semicolon separated list of bonuses to add to item (such as Mythic/Heroic/Warforged/socket)'),
('unauraall', 'Syntax: .unauraall all|$spellid|$spellName|$spellLink\nRemoves all spell effects or selected spell effect by $spellid/$spellName/$spellLink from all players.')
;
